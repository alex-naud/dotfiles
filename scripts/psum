#!/usr/bin/python3

import xml.etree.ElementTree as ET
import datetime

def main(root, period, begin=None, end=None):

    if period == 'month':

        now = datetime.datetime.now()
        begin = f"{now.year}-{now.month}-01"
        end = now.strftime("%Y-%m-%d")

        return build_output(root, begin, end)

    if period == 'week':

        now = datetime.datetime.now()
        delta = int(now.strftime("%w")) - 1
        begin = (now - datetime.timedelta(days=delta)).strftime("%Y-%m-%d")
        end = now.strftime("%Y-%m-%d")

        return build_output(root, begin, end)

    if period == 'custom':
        return build_output(root, begin, end)


def build_output(root, begin, end):

    # Header
    header = ""
    header = header.join((f"{'-'*35}\n", f"Report for {begin} to {end}\n",
            f"{'-'*35}\n\n"))
    
    # Body
    summary = get_summary(root, begin, end)
    output = header + pretty_print(summary)

    return output

def pretty_print(summary):

    str_out = ""
    total = get_total(summary)

    for client in summary.keys():

        # Print client info
        str_out = str_out + client + "\n"
        str_out = str_out + ("=" * len(client)) + "\n"

        # Calculate worktime by task
        for task in summary[client].keys():
            absolute = round(summary[client][task], 2)
            relative = round(absolute / total, 2)
            str_out = str_out + f"- {task}: {absolute} ({relative}) \n"

        # Calculate subtotal by client
        asubtotal = round(get_total(summary[client]), 2)
        rsubtotal = round(asubtotal / total, 2)
        str_out = str_out + f"*Subtotal: {asubtotal} ({rsubtotal})\n\n"


    # Print total
    str_out = str_out + "Total\n"
    str_out = str_out + ("=" * 5) + "\n"
    str_out = str_out + f"{round(total, 2)} hours"

    # Return pretty print
    return str_out

def get_summary(root, begin, end):

    clients = root.findall("project")
    out = {}

    for c in clients:
        tasks = c.findall('project')
        tcount = {t.get('name'):task_count(t, begin, end)
                for t in tasks}
        tcount = {k:v for k, v in tcount.items() if v is not None}
        out[c.get('name')] = tcount

    return {k:v for k, v in out.items() if len(v) != 0}

def task_count(task, begin, end):
    """ Calculate total worked hours for a single task"""

    # Extract session in between start and stop
    hours = []

    for s in task.findall("session"):
        d = to_date(s.get('date'))
        if (d >= to_date(begin)) and (d <= to_date(end)):
            hours.append(time_difference(s))

    if len(hours) > 0:
        return sum(hours)

def to_date(string):
    """ Convert string date to datetime object. """
    return datetime.date(*[int(i) for i in string.split("-")])

def time_difference(session):
    """ Calcualte time difference in hours """

    date = [int(i) for i in session.get('date').split("-")]
    start_time = [int(i) for i in session.get('start').split(":")]
    stop_time = [int(i) for i in session.get('stop').split(":")]

    tdelta = (datetime.datetime(*date+stop_time) -
            datetime.datetime(*date+start_time))

    return tdelta.seconds/60/60

def get_total(d):
    return sum(nested_dict_values(d))

def nested_dict_values(d):
  for v in d.values():
    if isinstance(v, dict):
      yield from nested_dict_values(v)
    else:
      yield v

# Use as command line application
if __name__ == "__main__":

    from pathlib import Path
    import argparse

    # CLI Implementation
    parser = argparse.ArgumentParser(
    prog="psum",
    description='Summarize work time collected with Kapow Punch clock')

    parser.add_argument('period', type=str, default="custom")
    parser.add_argument('-b', '--begin', type=str)
    parser.add_argument('-e', '--end', type=str,
            default=datetime.datetime.now().strftime("%Y-%m-%d"))

    args = parser.parse_args()

    # Local data
    home = str(Path.home())
    tree = ET.parse(home + "/.local/share/GottCode/Kapow/kapow.xml")
    root = tree.getroot()

    print("")
    print(main(root, args.period, args.begin, args.end))
    print("")

