" author: Alexandre Naud
" note: design for VIM 8+

" ------------------- General options --------------------------------
set nocompatible " Disable compatibility with vi
set nobackup " Do not save backup file
set splitright " Vertical split on the right
set background=dark " Fix different colors in tmux....
set modifiable      " Make a buffer modifiable...

" -------------------  General Editor options -------------------------
filetype on " Enable filetype detection
filetype plugin on " Load plugins for detected filetype
filetype indent on " Load indent file by filetype

set number " Add numbered lined

" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" Set colored vertical lines and define color
set colorcolumn=80 " Set colored vertical lines
highlight ColorColumn ctermbg=8

set shiftwidth=2 " Autoindent width
set tabstop=2 " Tab width
set expandtab " Use spaces instead of tabs

set hlsearch " Highlight words when searched

" ------------------------ Completion ---------------------------
set wildmenu " Enable auto completion menu
set wildmode=list:longest " Make wild menu behave like bash

" -------------------------- Mouse ------------------------------
set mouse=a " Mouse enable in all modes

" -------------------------- Mappings ---------------------------

" Set leader keys
let mapleader = ';'
let maplocalleader = ','

" Yank to end of line (behave as D and C)
nnoremap Y y$

" Yank to global clipboard (need clipboard, check vim-gtk3)
if has("clipboard")
  vnoremap <C-y> "+y
endif

" Yank to tmux clipboard
vnoremap <leader>y y<cr>:call system("tmux load-buffer -", @0)<cr>gv
nnoremap <leader>p :let @0 = system("tmux save-buffer -")<cr>"0p<cr>g;

" Quit terminal mode
tnoremap <Esc> <C-\><C-n>

" Disable search highlighting when refreshing screen
nnoremap <C-L> :nohl<CR><C-L> 

" Edit / Reload .vimrc
nnoremap <leader>rr :source ~/.vimrc<CR>
nnoremap <leader>re :e ~/.vimrc<CR>

" Open a terminal on the right
nnoremap <leader>t :vertical botright term<CR>
nnoremap <leader>t :vertical botright term<CR>

"" Navigation
nmap <silent> <C-down> :wincmd j<CR>
nmap <silent> <C-up> :wincmd k<CR>
nmap <silent> <C-left> :wincmd h<CR>
nmap <silent> <C-right> :wincmd l<CR>

" Disable arrow keys for muscle memory
"noremap <up> :echoerr "Umm, use k instead"<CR>
"noremap <down> :echoerr "Umm, use j instead"<CR>
"noremap <left> :echoerr "Umm, use h instead"<CR>
"noremap <right> :echoerr "Umm, use l instead"<CR>

" ------------------------ Status line --------------------------
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set laststatus=2

set statusline=
set statusline+=%#PmenuSel#                " Black backgroun
set statusline+=%{StatuslineGit()}         " Show git branch
set statusline+=%#LineNr#                  " Colored file path
set statusline+=\ %{expand('%:p:h:t')}/%t  " File name with parent directory
"set statusline+=\ %f                        " The path relative to current dir
set statusline+=%m                         " Save status (modification)
set statusline+=%r                         " Read only flag
set statusline+=%#PmenuSel#                " Black backgroun
set statusline+=%=                         " Align right (following stuff)
set statusline+=%y                                           " File type
set statusline+=\                          " White space

" Encoding with warning if not UTF-8
set statusline+=%#warningmsg#%6{(&fenc!='utf-8'&&&fenc!='')?''.&fenc.'':''}
set statusline+=%#PmenuSel#%6{(&fenc=='utf-8'&&&fenc!='')?''.&fenc.'':''}

" File format with warning if not unix
set statusline+=%#warningmsg#%{&ff!='unix'?':'.&ff.'':''}
set statusline+=%#PmenuSel#%{&ff=='unix'?':'.&ff.'':''}

"set statusline+=\ %6{&fileencoding?&fileencoding:&encoding}  " Encoding
"set statusline+=\:%{&fileformat}                             " Format

set statusline+=%#PmenuSel#                " Black background
set statusline+=\ %4l,%c                   " Line, columns
set statusline+=\ %4p%%                    " File percent

" -------------------------- Plugins ----------------------------
" Only load plugins if Plug detected
if filereadable(expand('~/.vim/autoload/plug.vim'))
  
  call plug#begin()
  Plug 'jpalardy/vim-slime' " REPL for vim
  Plug 'dense-analysis/ale' " Asychronous Lint Engine
  call plug#end()

  " vim-slime
  let g:slime_target = 'tmux'
  let g:slime_ipython = 0
  let g:slime_bracketed_paste = 1

  xmap <space> <Plug>SlimeRegionSend
  nmap <space> <Plug>SlimeParagraphSend

  " ALE
  let b:ale_linters = {
        \ 'python': ['pyflakes'],
        \ 'R': ['lintr'],
        \}

  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'

  "" Toggle ALE
  nnoremap <leader>at :ALEToggle<CR>

  "" Navigate between errors  
  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)

endif
